{"path":"./","status":2,"time":"2020-03-03T12:30:42.746Z","files":null,"dirs":[{"path":"./reference-vs-value/","status":2,"time":"2020-03-03T12:30:42.740Z","files":[{"path":"./reference-vs-value/comparing.js","status":2,"source":"// comparing objects and arrays with === is based on reference\n// comparisons are true when they reference the same thing in memory\n// psst. JS Tutor will help a lot with this example\n\n// examples with arrays\n\nconst arrayOne = ['hi', 'bye'];\nconst alsoArrayOne = arrayOne;\nconsole.assert(alsoArrayOne === arrayOne, 'alsoArrayOne === arrayOne');\nconsole.assert(alsoArrayOne[0] === arrayOne[0], 'alsoArrayOne[0] === arrayOne[0]');\nconsole.assert(alsoArrayOne[1] === arrayOne[1], 'alsoArrayOne[1] === arrayOne[1]');\n\n// two arrays with the same values do not compare to true\nconst arrayTwo = ['hi', 'bye'];\nconsole.assert(arrayTwo !== arrayOne, 'arrayTwo !== arrayOne');\nconsole.assert(arrayTwo[0] === arrayOne[0], 'arrayTwo[0] === arrayOne[0]');\nconsole.assert(arrayTwo[1] === arrayOne[1], 'arrayTwo[1] === arrayOne[1]');\n\nalsoArrayOne.push('mega');\nconsole.assert(arrayTwo[2] === undefined, 'arrayTwo does not change when arrayOne does');\narrayTwo.push('huh?');\nconsole.assert(arrayOne[2] === undefined, 'arrayOne does not change when arrayTwo does');\n\n// examples with objects\n\nconst objectOne = { first: 'hi', second: 'bye' };\nconst alsoObjectOne = objectOne;\nconsole.assert(alsoObjectOne === objectOne, 'alsoObjectOne === objectOne');\nconsole.assert(alsoObjectOne.first === objectOne.first, 'alsoObjectOne.first === objectOne.first');\nconsole.assert(alsoObjectOne.second === objectOne.second, 'alsoObjectOne.second === objectOne.second');\n\n\n// two objects with the same values do not compare to true\nconst objectTwo = { first: 'hi', second: 'bye' };\nconsole.assert(objectTwo !== objectOne, 'objectTwo !== objectOne');\nconsole.assert(objectTwo.first === objectOne.first, 'objectTwo.first === objectOne.first');\nconsole.assert(objectTwo.second === objectOne.second, 'objectTwo.second === objectOne.second');\n\n\nalsoObjectOne.m = 'ega';\nconsole.assert(alsoObjectTwo.m === undefined, 'objectTwo does not change when objectOne does');\nobjectTwo.h = 'uh?';\nconsole.assert(objectOne.h === undefined, 'objectOne does not change when objectTwo does');\n","report":[{"assertion":[true,"alsoArrayOne === arrayOne"]},{"assertion":[true,"alsoArrayOne[0] === arrayOne[0]"]},{"assertion":[true,"alsoArrayOne[1] === arrayOne[1]"]},{"assertion":[true,"arrayTwo !== arrayOne"]},{"assertion":[true,"arrayTwo[0] === arrayOne[0]"]},{"assertion":[true,"arrayTwo[1] === arrayOne[1]"]},{"assertion":[true,"arrayTwo does not change when arrayOne does"]},{"assertion":[false,"arrayOne does not change when arrayTwo does"]},{"assertion":[true,"alsoObjectOne === objectOne"]},{"assertion":[true,"alsoObjectOne.first === objectOne.first"]},{"assertion":[true,"alsoObjectOne.second === objectOne.second"]},{"assertion":[true,"objectTwo !== objectOne"]},{"assertion":[true,"objectTwo.first === objectOne.first"]},{"assertion":[true,"objectTwo.second === objectOne.second"]},{"error":"ReferenceError: alsoObjectTwo is not defined\n    at Object.<anonymous> ( [...] /reference-vs-value/comparing.js:41:16)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]},{"path":"./reference-vs-value/const-reference-types.js","status":2,"source":"// using const with arrays and objects is like locking a bag\n//  someone can't steal your bag because it's locked in place\n//  but they can still take things out or put things in\n\nconst constantObject = { a: 2 };\nconstantObject.a = 3; // no error\nconstantObject.b = 4; // no error\nconstantObject = { a: 3 }; // error!\n\nconst constantArray = [4];\nconstantArray[0] = 6; // no error\nconstantArray[1] = 7; // no error\nconstantArray = [6]; // error!\n","report":[{"error":"TypeError: Assignment to constant variable.\n    at Object.<anonymous> ( [...] /reference-vs-value/const-reference-types.js:8:16)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]},{"path":"./reference-vs-value/sharing-a-reference.js","status":0,"source":"// primitives are stored \"by value\", connected to one variable\n//  assigning a primitive to a new variable makes a copy of it\n//  modifying the new variable does not change the old one\n\nconst number5 = 5;\nlet new5 = number5;\nnew5 = new5 + 1;\nconsole.assert(new5 === 6, 'new5 stores has been modified');\nconsole.assert(number5 === 5, 'original variable was not modified');\n\n\n// objects & arrays are stored by reference\n//  both variables reference the same object in memory\n//  modifying on variable changes both\n\nlet objectOne = {};\nconst objectTwo = objectOne;\nobjectTwo.x = 6;\nconsole.assert(objectOne.x === 6, 'objectOne has changed after modifying objectTwo');\nobjectOne.y = 'hi!';\nconsole.assert(objectTwo.y === 'hi!', 'objectTwo has changed after modifying objectOne');\nobjectOne = undefined;\nconsole.assert(objectTwo !== undefined, 'reassigning objectOne does not affect objectTwo');\n\nlet arrayOne = [];\nconst arrayTwo = arrayOne;\narrayTwo[0] = 7;\nconsole.assert(arrayOne[0] === 7, 'arrayOne has changed after modifying arrayTwo');\narrayOne[1] = 'bye!';\nconsole.assert(arrayTwo[1] === 'bye!', 'arrayTwo has changed after modifying arrayOne');\narrayOne = undefined;\nconsole.assert(arrayTwo !== undefined, 'reassigning arrayOne does not affect arrayTwo');\n\n\n","report":[{"assertion":[true,"new5 stores has been modified"]},{"assertion":[true,"original variable was not modified"]},{"assertion":[true,"objectOne has changed after modifying objectTwo"]},{"assertion":[true,"objectTwo has changed after modifying objectOne"]},{"assertion":[true,"reassigning objectOne does not affect objectTwo"]},{"assertion":[true,"arrayOne has changed after modifying arrayTwo"]},{"assertion":[true,"arrayTwo has changed after modifying arrayOne"]},{"assertion":[true,"reassigning arrayOne does not affect arrayTwo"]}]}],"dirs":[{"path":"./reference-vs-value/challenges/","status":2,"time":"2020-03-03T12:30:42.740Z","files":[{"path":"./reference-vs-value/challenges/array-1.js","status":2,"source":"console.log('\\n--- array challenge: 1 ---');\n// psst.  use JS Tutor & the debugger!\n\n\n; // declare and assign array1\n; // declare and assign array2\n\nconst areTheSameArray = array1 === array2;\nconst sameZeroValue = array1[0] === array2[0];\nconst zeroValueIsHi = array1[0] === 'hi';\nconsole.assert(areTheSameArray && sameZeroValue && zeroValueIsHi, 'Test 1');\n\n\n\nconst index = 1;\n// pass the next test\n\n\nconst arraysIndexAreSame = array1[index] === array2[index];\nconst array1IndexIsBye = array1[index] === 'bye';\nconsole.assert(arraysIndexAreSame && array1IndexIsBye, 'Test 2');\n","report":[{"error":"ReferenceError: array1 is not defined\n    at Object.<anonymous> ( [...] /reference-vs-value/challenges/array-1.js:8:25)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]},{"path":"./reference-vs-value/challenges/array-2.js","status":2,"source":"console.log('\\n--- array challenges: 2 ---');\n// psst.  use JS Tutor & the debugger!\n\n\n; // declare and assign array1\n; // declare and assign array2\n\nconst areDifferentArrays = array1 !== array2;\nconst sameZeroValue = array1[0] === array2[0];\nconst zeroValueIsHi = array1[0] === 'hi';\nconsole.assert(areDifferentArrays && sameZeroValue && zeroValueIsHi, 'Test 1');\n\nconst index = 1;\n// pass the last two asserts\n\nconst arraysIndexAreSame = array1[index] === array2[index];\nconst array1IndexIsBye = array1[index] === 'bye';\nconsole.assert(arraysIndexAreSame && array1IndexIsBye, 'Test 2');\n","report":[{"error":"ReferenceError: array1 is not defined\n    at Object.<anonymous> ( [...] /reference-vs-value/challenges/array-2.js:8:28)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]},{"path":"./reference-vs-value/challenges/object-1.js","status":2,"source":"console.log('\\n--- object challenges: 1 ---');\n// psst.  use JS Tutor & the debugger!\n\n\n; // declare and assign object1\n; // declare and assign object2\n\nconst areTheSameObject = object1 === object2;\nconst sameXValue = object1.x === object2.x;\nconst xValueIsHi = object1.x === 'hi';\nconsole.assert(areTheSameObject && sameXValue && xValueIsHi, 'Test 1');\n\n\nconst key = 'y';\n// pass the next tests\n\nconst objectsKeyAreSame = object1[key] === object2[key];\nconst object1YIsBye = object1.y === 'bye';\nconsole.assert(objectsKeyAreSame && objectsKeyAreSame, 'Test 2');\n","report":[{"error":"ReferenceError: object1 is not defined\n    at Object.<anonymous> ( [...] /reference-vs-value/challenges/object-1.js:8:26)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]},{"path":"./reference-vs-value/challenges/object-2.js","status":2,"source":"console.log('\\n--- object challenges: 2 ---');\n// psst.  use JS Tutor & the debugger!\n\n\n; // declare and assign object1\n; // declare and assign object2\n\nconst areNotTheSameObject = object1 !== object2;\nconst sameXValue = object1.x === object2.x;\nconst xValueIsHi = object1.x === 'hi';\nconsole.assert(areNotTheSameObject && sameXValue && xValueIsHi, 'Test 1');\n\n\nconst key = 'y';\n// pass the next tests\n\nconst objectsKeyAreSame = object1[key] === object2[key];\nconst object1YIsBye = object1.y === 'bye';\nconsole.assert(objectsKeyAreSame && object1YIsBye, 'Test 2');\n","report":[{"error":"ReferenceError: object1 is not defined\n    at Object.<anonymous> ( [...] /reference-vs-value/challenges/object-2.js:8:29)\n    at Module._compile (internal/modules/cjs/loader.js:777:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)"}]}],"dirs":null}]},{"path":"./side-effects/","status":1,"time":"2020-03-03T12:30:42.745Z","files":[{"path":"./side-effects/avoiding-side-effects.js","status":0,"source":"// the best way to avoid side-effects is to copy arguments\n//  if your function takes an object or array as a parameter\n//  create a copy at the beginning of your function and use the copy\n// psst. JS Tutor is helpful for this example\n\n\nconsole.log('\\n--- avoiding side effects: arrays ---');\n\nfunction arraySideEffect(arr, index, value) {\n  const copiedArr = JSON.parse(JSON.stringify(arr));\n  copiedArr[index] = value;\n  return copiedArr;\n}\n\nconst globalArray = [1, 2, 3];\nconst updatedArray = arraySideEffect(globalArray, 0, 'hi!');\n\nconsole.assert(updatedArray[0] === 'hi!', 'the returned array is updated ...');\nconsole.assert(globalArray[0] === 1, '... but the global array has not changed ...');\nconsole.assert(globalArray !== updatedArray, \"... because you avoided side-effects!\");\n\n\nconsole.log('--- avoiding side effects: objects ---');\n\nfunction objectSideEffect(obj, key, value) {\n  const copiedObj = JSON.parse(JSON.stringify(obj));\n  copiedObj[key] = value;\n  return copiedObj;\n}\n\nconst globalObject = { a: 1, b: 2, c: 3 };\nconst updatedObject = objectSideEffect(globalObject, 'a', 'hi!');\n\nconsole.assert(updatedObject.a === 'hi!', 'the returned object is updated ...');\nconsole.assert(globalObject.a === 1, '... but so is the global object ...');\nconsole.assert(globalObject !== updatedObject, \"... because they're the same thing!\");\n","report":[{"assertion":[true,"the returned array is updated ..."]},{"assertion":[true,"... but the global array has not changed ..."]},{"assertion":[true,"... because you avoided side-effects!"]},{"assertion":[true,"the returned object is updated ..."]},{"assertion":[true,"... but so is the global object ..."]},{"assertion":[true,"... because they're the same thing!"]}]},{"path":"./side-effects/challenges.js","status":1,"source":"// modify these functions so to avoid side-effects\n\nconsole.log('\\n-- side effects: first challenge --');\n\nfunction addOneToEach(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] += 1;\n  }\n  return arr;\n}\n\nconst initialArray = [1, 2];\nconst addedArray = addOneToEach(initialArray);\nconsole.assert(initialArray !== addedArray, 'array: first');\nconsole.assert(addedArray[0] === 2, 'array: second');\nconsole.assert(addedArray[1] === 3, 'array: third');\nconsole.assert(initialArray[0] === 1, 'array: fourth');\nconsole.assert(initialArray[1] === 2, 'array: fifth');\n\n\nconsole.log('-- side effects: second challenge --');\n\nfunction setValueToKey(obj) {\n  for (let key in obj) {\n    obj[key] = key;\n  }\n  return obj;\n}\n\nconst initialObject = { a: 1, b: 2 };\nconst keyKeyObject = setValueToKey(initialObject);\nconsole.assert(initialObject !== keyKeyObject, 'object: first');\nconsole.assert(keyKeyObject.a === 'a', 'object: second');\nconsole.assert(keyKeyObject.b === 'b', 'object: third');\nconsole.assert(initialObject.a === 1, 'object: fourth');\nconsole.assert(initialObject.b === 2, 'object: fifth');\n","report":[{"assertion":[false,"array: first"]},{"assertion":[true,"array: second"]},{"assertion":[true,"array: third"]},{"assertion":[false,"array: fourth"]},{"assertion":[false,"array: fifth"]},{"assertion":[false,"object: first"]},{"assertion":[true,"object: second"]},{"assertion":[true,"object: third"]},{"assertion":[false,"object: fourth"]},{"assertion":[false,"object: fifth"]}]},{"path":"./side-effects/copying-arrays-and-objects.js","status":0,"source":"// there are many ways to copy arrays & objects in javascript\n//  for now you will learn JSON.parse(JSON.stringify(thing))\n//  it's simplest to understand and works well\n\n// JSON.stringify converts objects and arrays into strings\n// JSON.parse turns the strings into a new array or object\n\n\nconsole.log('\\n-- JSON.parse(JSON.stringify(array)) --');\n\n// create a string version of the array\nconst array = [true, 'hi'];\nconst arrayStringified = JSON.stringify(array);\nconsole.assert(arrayStringified === '[true,\"hi\"]', 'arrayStringified');\n\n// create a new array based on the string version\nconst parsedArray = JSON.parse(arrayStringified);\nconsole.assert(parsedArray[0] === array[0], 'parsedArray[0] === array[0]');\nconsole.assert(parsedArray[1] === array[1], 'parsedArray[1] === array[1]');\n\n// and the new array is a true copy of the original\nconsole.assert(parsedArray !== array, 'parsedArray !== array');\n\n// or do it all in one step:\nconst copiedArray = JSON.parse(JSON.stringify(array));\nconsole.assert(copiedArray[0] === array[0], 'copiedArray[0] === array[0]');\nconsole.assert(copiedArray[1] === array[1], 'copiedArray[1] === array[1]');\nconsole.assert(copiedArray !== array, 'copiedArray !== array');\n\n\n\nconsole.log('-- JSON.parse(JSON.stringify(object)) --');\n\n// create a string version of the object\nconst object = { a: true, b: 'hi' };\nconst objectStringified = JSON.stringify(object);\nconsole.assert(objectStringified === '{\"a\":true,\"b\":\"hi\"}', 'objectStringified');\n\n// create a new object based on the string version\nconst parsedObject = JSON.parse(objectStringified);\nconsole.assert(parsedObject.a === object.a, 'parsedObject.a === object.a');\nconsole.assert(parsedObject.b === object.b, 'parsedObject.b === object.b');\n\n// and the new object is true copy of the original\nconsole.assert(parsedObject !== object, 'parsedObject !== object');\n\n// or do it all in one step:\nconst copiedObject = JSON.parse(JSON.stringify(object));\nconsole.assert(copiedObject[0] === object[0], 'copiedObject[0] === object[0]');\nconsole.assert(copiedObject[1] === object[1], 'copiedObject[1] === object[1]');\nconsole.assert(copiedObject !== object, 'copiedObject !== object');\n\n\n\n\n","report":[{"assertion":[true,"arrayStringified"]},{"assertion":[true,"parsedArray[0] === array[0]"]},{"assertion":[true,"parsedArray[1] === array[1]"]},{"assertion":[true,"parsedArray !== array"]},{"assertion":[true,"copiedArray[0] === array[0]"]},{"assertion":[true,"copiedArray[1] === array[1]"]},{"assertion":[true,"copiedArray !== array"]},{"assertion":[true,"objectStringified"]},{"assertion":[true,"parsedObject.a === object.a"]},{"assertion":[true,"parsedObject.b === object.b"]},{"assertion":[true,"parsedObject !== object"]},{"assertion":[true,"copiedObject[0] === object[0]"]},{"assertion":[true,"copiedObject[1] === object[1]"]},{"assertion":[true,"copiedObject !== object"]}]},{"path":"./side-effects/what-are-they.js","status":0,"source":"// arrays and objects arguments are passed by reference\n//  this means a function is modifying the global data structure\n// side-effects happen when:\n//  calling a function directly changes a global value\n// psst. JS Tutor is very helpful for these examples\n\nconsole.log('\\n--- side effects: arrays ---');\n\nfunction arraySideEffect(arr, index, value) {\n  arr[index] = value;\n  return arr;\n}\n\nconst globalArray = [1, 2, 3];\nconst updatedArray = arraySideEffect(globalArray, 0, 'hi!');\n\nconsole.assert(updatedArray[0] === 'hi!', 'the returned array is updated ...');\nconsole.assert(globalArray[0] === 'hi!', '... but so is the global array ...');\nconsole.assert(globalArray === updatedArray, \"... because they're the same thing!\");\n\n\nconsole.log('--- side effects: objects ---');\n\nfunction objectSideEffect(obj, key, value) {\n  obj[key] = value;\n  return obj;\n}\n\nconst globalObject = { a: 1, b: 2, c: 3 };\nconst updatedObject = objectSideEffect(globalObject, 'a', 'hi!');\n\nconsole.assert(updatedObject.a === 'hi!', 'the returned object is updated ...');\nconsole.assert(globalObject.a === 'hi!', '... but so is the global object ...');\nconsole.assert(globalObject === updatedObject, \"... because they're the same thing!\");\n","report":[{"assertion":[true,"the returned array is updated ..."]},{"assertion":[true,"... but so is the global array ..."]},{"assertion":[true,"... because they're the same thing!"]},{"assertion":[true,"the returned object is updated ..."]},{"assertion":[true,"... but so is the global object ..."]},{"assertion":[true,"... because they're the same thing!"]}]}],"dirs":null},{"path":"./test-cases/","status":1,"time":"2020-03-03T12:30:42.746Z","files":[{"path":"./test-cases/evens.js","status":1,"source":"const findEvensArray1 = ['.', '1', '2', ':'];\nconst findEvensArray2 = ['1', 'two', 'three', '10'];\nconst findEvensArray3 = ['one', '2', '', 'NaN'];\nconst findEvensArray4 = ['.', 1, 2, NaN];\n\nconst oddsToNotFind = ['1', '3', '5'];\nconst evensToFind = ['2', '4', '6'];\n\nconst findAllEvensTests = [\n  { name: 'Test 1', args: [findEvensArray1], expected: ['2'] },\n  { name: 'Test 2', args: [findEvensArray2], expected: ['10'] },\n  { name: 'Test 3', args: [findEvensArray3], expected: ['2', ''] },\n  { name: 'Test 4', args: [findEvensArray4], expected: null },\n  { name: 'Test 5', args: [[1, 2, 3]], expected: null },\n  { name: 'Test 6', args: [oddsToNotFind], expected: [] },\n  { name: 'Test 7', args: [evensToFind], expected: ['2', '4', '6'] },\n];\n\nconst findAllEvens = (arr) => {\n  return null;\n  // write me!\n};\n\nfor (let test of findAllEvensTests) {\n  const expected = JSON.stringify(test.expected);\n  const actual = JSON.stringify(findAllEvens(test.args));\n  console.assert(actual === expected, test.name);\n};\n","report":[{"assertion":[false,"Test 1"]},{"assertion":[false,"Test 2"]},{"assertion":[false,"Test 3"]},{"assertion":[true,"Test 4"]},{"assertion":[true,"Test 5"]},{"assertion":[false,"Test 6"]},{"assertion":[false,"Test 7"]}]}],"dirs":null}]}