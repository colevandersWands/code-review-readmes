{"path":"./side-effects/","status":2,"time":"2020-03-03T16:41:40.028Z","files":[{"path":"./side-effects/avoiding-side-effects.js","status":2,"source":"// the best way to avoid side-effects is to copy arguments\n//  if your function takes an object or array as a parameter\n//  create a copy at the beginning of your function and use the copy\n// psst. JS Tutor is helpful for this example\n\n\nconsole.log('\\n--- avoiding side effects: arrays ---');\n\nfunction arraySideEffectarr, index, value) {\n  const copiedArr = JSON.parse(JSON.stringify(arr));\n  copiedArr[index] = value;\n  return copiedArr;\n}\n\nconst globalArray = [1, 2, 3];\nconst updatedArray = arraySideEffect(globalArray, 0, 'hi!');\n\nconsole.assert(updatedArray[0] === 'hi!', 'the returned array is updated ...');\nconsole.assert(globalArray[0] === 1, '... but the global array has not changed ...');\nconsole.assert(globalArray !== updatedArray, \"... because you avoided side-effects!\");\n\n\nconsole.log('--- avoiding side effects: objects ---');\n\nfunction objectSideEffect(obj, key, value) {\n  const copiedObj = JSON.parse(JSON.stringify(obj));\n  copiedObj[key] = value;\n  return copiedObj;\n}\n\nconst globalObject = { a: 1, b: 2, c: 3 };\nconst updatedObject = objectSideEffect(globalObject, 'a', 'hi!');\n\nconsole.assert(updatedObject.a === 'hi!', 'the returned object is updated ...');\nconsole.assert(globalObject.a === 1, '... but so is the global object ...');\nconsole.assert(globalObject !== updatedObject, \"... because they're the same thing!\");\n","report":[{"error":" [...] /side-effects/avoiding-side-effects.js:9\nfunction arraySideEffectarr, index, value) {\n                           ^\n\nSyntaxError: Unexpected token ,\n    at Module._compile (internal/modules/cjs/loader.js:720:22)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:788:10)\n    at Module.load (internal/modules/cjs/loader.js:643:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:556:12)\n    at Module.require (internal/modules/cjs/loader.js:683:19)\n    at require (internal/modules/cjs/helpers.js:16:16)\n    at evaluateFile ( [...] /review.js:69:5)\n    at  [...] /review.js:90:24\n    at Array.map (<anonymous>)\n    at evaluateDirectory ( [...] /review.js:90:8)"}]},{"path":"./side-effects/challenges.js","status":1,"source":"// modify these functions so to avoid side-effects\n\nconsole.log('\\n-- side effects: first challenge --');\n\nfunction addOneToEach(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] += 1;\n  }\n  return arr;\n}\n\nconst initialArray = [1, 2];\nconst addedArray = addOneToEach(initialArray);\nconsole.assert(initialArray !== addedArray, 'array: first');\nconsole.assert(addedArray[0] === 2, 'array: second');\nconsole.assert(addedArray[1] === 3, 'array: third');\nconsole.assert(initialArray[0] === 1, 'array: fourth');\nconsole.assert(initialArray[1] === 2, 'array: fifth');\n\n\nconsole.log('-- side effects: second challenge --');\n\nfunction setValueToKey(obj) {\n  for (let key in obj) {\n    obj[key] = key;\n  }\n  return obj;\n}\n\nconst initialObject = { a: 1, b: 2 };\nconst keyKeyObject = setValueToKey(initialObject);\nconsole.assert(initialObject !== keyKeyObject, 'object: first');\nconsole.assert(keyKeyObject.a === 'a', 'object: second');\nconsole.assert(keyKeyObject.b === 'b', 'object: third');\nconsole.assert(initialObject.a === 1, 'object: fourth');\nconsole.assert(initialObject.b === 2, 'object: fifth');\n","report":[{"assertion":[false,"array: first"]},{"assertion":[true,"array: second"]},{"assertion":[true,"array: third"]},{"assertion":[false,"array: fourth"]},{"assertion":[false,"array: fifth"]},{"assertion":[false,"object: first"]},{"assertion":[true,"object: second"]},{"assertion":[true,"object: third"]},{"assertion":[false,"object: fourth"]},{"assertion":[false,"object: fifth"]}]},{"path":"./side-effects/copying-arrays-and-objects.js","status":0,"source":"// there are many ways to copy arrays & objects in javascript\n//  for now you will learn JSON.parse(JSON.stringify(thing))\n//  it's simplest to understand and works well\n\n// JSON.stringify converts objects and arrays into strings\n// JSON.parse turns the strings into a new array or object\n\n\nconsole.log('\\n-- JSON.parse(JSON.stringify(array)) --');\n\n// create a string version of the array\nconst array = [true, 'hi'];\nconst arrayStringified = JSON.stringify(array);\nconsole.assert(arrayStringified === '[true,\"hi\"]', 'arrayStringified');\n\n// create a new array based on the string version\nconst parsedArray = JSON.parse(arrayStringified);\nconsole.assert(parsedArray[0] === array[0], 'parsedArray[0] === array[0]');\nconsole.assert(parsedArray[1] === array[1], 'parsedArray[1] === array[1]');\n\n// and the new array is a true copy of the original\nconsole.assert(parsedArray !== array, 'parsedArray !== array');\n\n// or do it all in one step:\nconst copiedArray = JSON.parse(JSON.stringify(array));\nconsole.assert(copiedArray[0] === array[0], 'copiedArray[0] === array[0]');\nconsole.assert(copiedArray[1] === array[1], 'copiedArray[1] === array[1]');\nconsole.assert(copiedArray !== array, 'copiedArray !== array');\n\n\n\nconsole.log('-- JSON.parse(JSON.stringify(object)) --');\n\n// create a string version of the object\nconst object = { a: true, b: 'hi' };\nconst objectStringified = JSON.stringify(object);\nconsole.assert(objectStringified === '{\"a\":true,\"b\":\"hi\"}', 'objectStringified');\n\n// create a new object based on the string version\nconst parsedObject = JSON.parse(objectStringified);\nconsole.assert(parsedObject.a === object.a, 'parsedObject.a === object.a');\nconsole.assert(parsedObject.b === object.b, 'parsedObject.b === object.b');\n\n// and the new object is true copy of the original\nconsole.assert(parsedObject !== object, 'parsedObject !== object');\n\n// or do it all in one step:\nconst copiedObject = JSON.parse(JSON.stringify(object));\nconsole.assert(copiedObject[0] === object[0], 'copiedObject[0] === object[0]');\nconsole.assert(copiedObject[1] === object[1], 'copiedObject[1] === object[1]');\nconsole.assert(copiedObject !== object, 'copiedObject !== object');\n\n\n\n\n","report":[{"assertion":[true,"arrayStringified"]},{"assertion":[true,"parsedArray[0] === array[0]"]},{"assertion":[true,"parsedArray[1] === array[1]"]},{"assertion":[true,"parsedArray !== array"]},{"assertion":[true,"copiedArray[0] === array[0]"]},{"assertion":[true,"copiedArray[1] === array[1]"]},{"assertion":[true,"copiedArray !== array"]},{"assertion":[true,"objectStringified"]},{"assertion":[true,"parsedObject.a === object.a"]},{"assertion":[true,"parsedObject.b === object.b"]},{"assertion":[true,"parsedObject !== object"]},{"assertion":[true,"copiedObject[0] === object[0]"]},{"assertion":[true,"copiedObject[1] === object[1]"]},{"assertion":[true,"copiedObject !== object"]}]},{"path":"./side-effects/what-are-they.js","status":0,"source":"// arrays and objects arguments are passed by reference\n//  this means a function is modifying the global data structure\n// side-effects happen when:\n//  calling a function directly changes a global value\n// psst. JS Tutor is very helpful for these examples\n\nconsole.log('\\n--- side effects: arrays ---');\n\nfunction arraySideEffect(arr, index, value) {\n  arr[index] = value;\n  return arr;\n}\n\nconst globalArray = [1, 2, 3];\nconst updatedArray = arraySideEffect(globalArray, 0, 'hi!');\n\nconsole.assert(updatedArray[0] === 'hi!', 'the returned array is updated ...');\nconsole.assert(globalArray[0] === 'hi!', '... but so is the global array ...');\nconsole.assert(globalArray === updatedArray, \"... because they're the same thing!\");\n\n\nconsole.log('--- side effects: objects ---');\n\nfunction objectSideEffect(obj, key, value) {\n  obj[key] = value;\n  return obj;\n}\n\nconst globalObject = { a: 1, b: 2, c: 3 };\nconst updatedObject = objectSideEffect(globalObject, 'a', 'hi!');\n\nconsole.assert(updatedObject.a === 'hi!', 'the returned object is updated ...');\nconsole.assert(globalObject.a === 'hi!', '... but so is the global object ...');\nconsole.assert(globalObject === updatedObject, \"... because they're the same thing!\");\n","report":[{"assertion":[true,"the returned array is updated ..."]},{"assertion":[true,"... but so is the global array ..."]},{"assertion":[true,"... because they're the same thing!"]},{"assertion":[true,"the returned object is updated ..."]},{"assertion":[true,"... but so is the global object ..."]},{"assertion":[true,"... because they're the same thing!"]}]}],"dirs":null}